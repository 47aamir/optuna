name: Tests (MPI)

on:
  push:
    branches:
      - master
  pull_request: {}
  schedule:
    - cron: '0 23 * * SUN-THU'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.run_number || github.ref }}
  cancel-in-progress: true

jobs:
  tests-mpi:
    if: (github.event_name == 'schedule' && github.repository == 'optuna/optuna') || (github.event_name != 'schedule')
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps: 
    - name: Check for skip
      id: check-for-skip
      # The oldest and latest versions must be adapted.
      run: |
        if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ matrix.python-version }}" = "3.8" ] || [ "${{ matrix.python-version }}" = "3.11" ] ; then
          echo "job_mode=run" >> $GITHUB_OUTPUT
          echo "Run the checks"
        else
          echo "job_mode=skip" >> $GITHUB_OUTPUT
          echo "Skip the checks"
        fi

    - name: Checkout
      if: steps.check-for-skip.outputs.job_mode == 'run'
      uses: actions/checkout@v3

    - name: Setup Python${{ matrix.python-version }}
      if: steps.check-for-skip.outputs.job_mode == 'run'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Setup cache
      if: steps.check-for-skip.outputs.job_mode == 'run'
      uses: actions/cache@v3
      env:
        cache-name: test-mpi
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('**/pyproject.toml') }}-v1
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-${{ env.cache-name }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Setup environment
      if: steps.check-for-skip.outputs.job_mode == 'run'
      run: |
        sudo apt-get update
        sudo apt-get -y install openmpi-bin libopenmpi-dev

    - name: Install
      if: steps.check-for-skip.outputs.job_mode == 'run'
      run: |
        python -m pip install --upgrade pip

        # Install minimal dependencies and confirm that `import optuna` is successful.
        pip install --progress-bar off .
        python -c 'import optuna'
        optuna --version

        pip install --progress-bar off .[test]
        pip install --progress-bar off .[optional] --extra-index-url https://download.pytorch.org/whl/cpu

        # TODO(not522): Remove this line when torchmetrics can be installed with extra-index-url
        pip install --progress-bar off torchmetrics

        pip install --progress-bar off .[integration] --extra-index-url https://download.pytorch.org/whl/cpu

    - name: Output installed packages
      if: steps.check-for-skip.outputs.job_mode == 'run'
      run: |
        pip freeze --all
    - name: Output dependency tree
      if: steps.check-for-skip.outputs.job_mode == 'run'
      run: |
        pip install pipdeptree
        pipdeptree

    - name: Tests
      if: steps.check-for-skip.outputs.job_mode == 'run'
      run: |
        export OMPI_MCA_rmaps_base_oversubscribe=yes

        if [ ${{ matrix.python-version }} != 3.11 ]; then
          mpirun -n 2 -- pytest tests/integration_tests/test_pytorch_distributed.py
        fi

      env:
        OMP_NUM_THREADS: 1
